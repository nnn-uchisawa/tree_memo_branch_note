name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-android:
    name: Androidビルド
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Javaのセットアップ
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Flutterのセットアップ
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: 依存関係のインストール
        run: flutter pub get

      - name: .envファイルの作成（ダミー）
        run: |
          cat << EOF > .env
          # ダミーのFirebase設定（ビルド検証用）
          ANDROID_API_KEY=dummy_key
          ANDROID_APP_ID=dummy_app_id
          ANDROID_MESSAGING_SENDER_ID=dummy_sender_id
          ANDROID_PROJECT_ID=dummy_project_id
          ANDROID_STORAGE_BUCKET=dummy_bucket
          IOS_API_KEY=dummy_key
          IOS_APP_ID=dummy_app_id
          IOS_MESSAGING_SENDER_ID=dummy_sender_id
          IOS_PROJECT_ID=dummy_project_id
          IOS_STORAGE_BUCKET=dummy_bucket
          IOS_BUNDLE_ID=jp.nnn.tree.dev
          EOF

      - name: コード生成
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: google-services.jsonの作成（ダミー）
        run: |
          cat << 'EOF' > android/app/google-services.json
          {
            "project_info": {
              "project_number": "123456789",
              "project_id": "dummy-project",
              "storage_bucket": "dummy-project.appspot.com"
            },
            "client": [
              {
                "client_info": {
                  "mobilesdk_app_id": "1:123456789:android:dummy",
                  "android_client_info": {
                    "package_name": "com.nnn.tree"
                  }
                },
                "oauth_client": [],
                "api_key": [
                  {
                    "current_key": "dummy-api-key"
                  }
                ],
                "services": {
                  "appinvite_service": {
                    "other_platform_oauth_client": []
                  }
                }
              }
            ],
            "configuration_version": "1"
          }
          EOF

      - name: Android APKビルド（開発版）
        run: flutter build apk --debug --flavor dev
        continue-on-error: true

      - name: ビルド結果の確認
        run: |
          if [ -f build/app/outputs/flutter-apk/app-dev-debug.apk ]; then
            echo "✅ APKビルドが成功しました"
            ls -lh build/app/outputs/flutter-apk/
          else
            echo "⚠️ APKビルドに失敗しました（秘密鍵などの設定が必要な可能性があります）"
          fi

  build-ios:
    name: iOSビルド
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Flutterのセットアップ
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: 依存関係のインストール
        run: flutter pub get

      - name: .envファイルの作成（ダミー）
        run: |
          cat << EOF > .env
          # ダミーのFirebase設定（ビルド検証用）
          ANDROID_API_KEY=dummy_key
          ANDROID_APP_ID=dummy_app_id
          ANDROID_MESSAGING_SENDER_ID=dummy_sender_id
          ANDROID_PROJECT_ID=dummy_project_id
          ANDROID_STORAGE_BUCKET=dummy_bucket
          IOS_API_KEY=dummy_key
          IOS_APP_ID=dummy_app_id
          IOS_MESSAGING_SENDER_ID=dummy_sender_id
          IOS_PROJECT_ID=dummy_project_id
          IOS_STORAGE_BUCKET=dummy_bucket
          IOS_BUNDLE_ID=jp.nnn.tree.dev
          EOF

      - name: コード生成
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: GoogleService-Info.plistの作成（ダミー）
        run: |
          cat << 'EOF' > ios/Runner/GoogleService-Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>dummy-client-id.apps.googleusercontent.com</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.dummy-client-id</string>
            <key>API_KEY</key>
            <string>dummy-api-key</string>
            <key>GCM_SENDER_ID</key>
            <string>123456789</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>jp.nnn.tree.dev</string>
            <key>PROJECT_ID</key>
            <string>dummy-project</string>
            <key>STORAGE_BUCKET</key>
            <string>dummy-project.appspot.com</string>
            <key>IS_ADS_ENABLED</key>
            <false/>
            <key>IS_ANALYTICS_ENABLED</key>
            <false/>
            <key>IS_APPINVITE_ENABLED</key>
            <false/>
            <key>IS_GCM_ENABLED</key>
            <false/>
            <key>IS_SIGNIN_ENABLED</key>
            <false/>
            <key>GOOGLE_APP_ID</key>
            <string>1:123456789:ios:dummy-app-id</string>
          </dict>
          </plist>
          EOF

      - name: Podのインストール
        run: |
          cd ios
          pod install
        continue-on-error: true

      - name: iOSビルド（開発版・ビルドのみ）
        run: flutter build ios --debug --flavor dev --no-codesign
        continue-on-error: true

      - name: ビルド結果の確認
        run: |
          if [ -d build/ios/iphoneos/Runner.app ]; then
            echo "✅ iOSビルドが成功しました"
            ls -lh build/ios/iphoneos/
          else
            echo "⚠️ iOSビルドに失敗しました（証明書などの設定が必要な可能性があります）"
          fi

