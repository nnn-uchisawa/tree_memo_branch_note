name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quick-check:
    name: クイックチェック
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Flutterのセットアップ
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: 依存関係のインストール
        run: flutter pub get

      - name: .envファイルの作成（ダミー）
        run: |
          cat << EOF > .env
          # ダミーのFirebase設定（ビルド検証用）
          ANDROID_API_KEY=dummy_key
          ANDROID_APP_ID=dummy_app_id
          ANDROID_MESSAGING_SENDER_ID=dummy_sender_id
          ANDROID_PROJECT_ID=dummy_project_id
          ANDROID_STORAGE_BUCKET=dummy_bucket
          IOS_API_KEY=dummy_key
          IOS_APP_ID=dummy_app_id
          IOS_MESSAGING_SENDER_ID=dummy_sender_id
          IOS_PROJECT_ID=dummy_project_id
          IOS_STORAGE_BUCKET=dummy_bucket
          IOS_BUNDLE_ID=jp.nnn.tree.dev
          EOF

      - name: コード生成
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: google-services.jsonの作成（ダミー）
        run: |
          cat << 'EOF' > android/app/google-services.json
          {
            "project_info": {
              "project_number": "123456789",
              "project_id": "dummy-project",
              "storage_bucket": "dummy-project.appspot.com"
            },
            "client": [
              {
                "client_info": {
                  "mobilesdk_app_id": "1:123456789:android:dummy",
                  "android_client_info": {
                    "package_name": "com.nnn.tree"
                  }
                },
                "oauth_client": [],
                "api_key": [
                  {
                    "current_key": "dummy-api-key"
                  }
                ],
                "services": {
                  "appinvite_service": {
                    "other_platform_oauth_client": []
                  }
                }
              }
            ],
            "configuration_version": "1"
          }
          EOF

      - name: フォーマットチェック
        id: format
        run: |
          dart format --set-exit-if-changed . > format_output.txt 2>&1 || echo "FORMAT_FAILED=true" >> $GITHUB_OUTPUT
          cat format_output.txt

      - name: 静的解析
        id: analyze
        run: |
          flutter analyze > analyze_output.txt 2>&1 || echo "ANALYZE_FAILED=true" >> $GITHUB_OUTPUT
          cat analyze_output.txt

      - name: 基本テスト
        id: test
        run: |
          flutter test --no-coverage > test_output.txt 2>&1 || echo "TEST_FAILED=true" >> $GITHUB_OUTPUT
          cat test_output.txt

      - name: チェック結果のサマリー
        if: always()
        run: |
          echo "## 🔍 PR チェック結果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.format.outputs.FORMAT_FAILED }}" == "true" ]; then
            echo "- ❌ **フォーマット**: 失敗" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **フォーマット**: 成功" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.analyze.outputs.ANALYZE_FAILED }}" == "true" ]; then
            echo "- ❌ **静的解析**: 失敗" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **静的解析**: 成功" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.test.outputs.TEST_FAILED }}" == "true" ]; then
            echo "- ❌ **テスト**: 失敗" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **テスト**: 成功" >> $GITHUB_STEP_SUMMARY
          fi

      - name: チェック失敗時の終了
        if: steps.format.outputs.FORMAT_FAILED == 'true' || steps.analyze.outputs.ANALYZE_FAILED == 'true' || steps.test.outputs.TEST_FAILED == 'true'
        run: exit 1

